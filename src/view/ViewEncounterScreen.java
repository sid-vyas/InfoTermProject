/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author siddh
 */
public class ViewEncounterScreen extends javax.swing.JPanel {

    private static final String username = "root";
    private static final String password = "root";
    private static final String dataConnector = "jdbc:mysql://localhost:3306/connector";
    Connection sqlConn = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    
    /**
     * Creates new form ViewEncounterScreen
     */
    public ViewEncounterScreen() {
        initComponents();
        populateTable();
    }
    
    private void populateTable() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            sqlConn = DriverManager.getConnection(dataConnector, username, password);
            pst = sqlConn.prepareStatement("select * from encounters");
            
            rs = pst.executeQuery();
            ResultSetMetaData stData = rs.getMetaData();
            
            int columnCount = stData.getColumnCount();
            
            DefaultTableModel recordTable = (DefaultTableModel) encounterListTable.getModel();
            recordTable.setRowCount(0);
            
            while(rs.next()) {
                Vector columnData = new Vector();
                
                for(int i = 0; i <= columnCount; i++) {
                    columnData.add(rs.getString("encounter_id"));
                    columnData.add(rs.getString("PatientName"));
                    columnData.add(rs.getString("Heartbeat"));
                    columnData.add(rs.getString("Temperature"));
                    columnData.add(rs.getString("BloodPressure"));
                    columnData.add(rs.getString("Diagnosis"));
                } 
                recordTable.addRow(columnData);
            }
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        recordEncounterButton = new javax.swing.JButton();
        heartbeatLabel = new javax.swing.JLabel();
        encounterDescriptionLabel = new javax.swing.JLabel();
        heartbeatField = new javax.swing.JTextField();
        temperatureLabel = new javax.swing.JLabel();
        temperatureField = new javax.swing.JTextField();
        bloodPressureLabel = new javax.swing.JLabel();
        bloodPressureField = new javax.swing.JTextField();
        diagnosisLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        diagnosisField = new javax.swing.JTextArea();
        saveButton = new javax.swing.JButton();
        titleLabel1 = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        encounterListTable = new javax.swing.JTable();
        updateButton = new javax.swing.JButton();
        heartbeatLabel1 = new javax.swing.JLabel();
        encounterDescriptionLabel1 = new javax.swing.JLabel();
        heartbeatField1 = new javax.swing.JTextField();
        temperatureLabel1 = new javax.swing.JLabel();
        temperatureField1 = new javax.swing.JTextField();
        bloodPressureLabel1 = new javax.swing.JLabel();
        bloodPressureField1 = new javax.swing.JTextField();
        diagnosisLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        diagnosisField1 = new javax.swing.JTextArea();
        saveButton1 = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        titleLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        titleLabel.setText("Create an Encounter");

        recordEncounterButton.setText("Record Encounter");
        recordEncounterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordEncounterButtonActionPerformed(evt);
            }
        });

        heartbeatLabel.setText("Heartbeat:");

        encounterDescriptionLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        encounterDescriptionLabel.setText("Enter Encounter Details:");

        heartbeatField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heartbeatFieldActionPerformed(evt);
            }
        });

        temperatureLabel.setText("Temperature:");

        temperatureField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temperatureFieldActionPerformed(evt);
            }
        });

        bloodPressureLabel.setText("Blood Pressure:");

        bloodPressureField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bloodPressureFieldActionPerformed(evt);
            }
        });

        diagnosisLabel.setText("Diagnosis:");

        diagnosisField.setColumns(20);
        diagnosisField.setRows(5);
        jScrollPane1.setViewportView(diagnosisField);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        setBackground(new java.awt.Color(255, 153, 153));

        titleLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        titleLabel1.setText("Create an Encounter");

        encounterListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Encounter ID", "Patient Name", "Heartbeat", "Temperature", "Blood Pressure", "Diagnosis"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(encounterListTable);

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        heartbeatLabel1.setText("Heartbeat:");

        encounterDescriptionLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        encounterDescriptionLabel1.setText("Update Encounter Details");

        heartbeatField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heartbeatField1ActionPerformed(evt);
            }
        });

        temperatureLabel1.setText("Temperature:");

        temperatureField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temperatureField1ActionPerformed(evt);
            }
        });

        bloodPressureLabel1.setText("Blood Pressure:");

        bloodPressureField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bloodPressureField1ActionPerformed(evt);
            }
        });

        diagnosisLabel1.setText("Diagnosis:");

        diagnosisField1.setColumns(20);
        diagnosisField1.setRows(5);
        jScrollPane2.setViewportView(diagnosisField1);

        saveButton1.setText("Save");
        saveButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButton1ActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(encounterDescriptionLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(saveButton1)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(diagnosisLabel1)
                                        .addComponent(temperatureLabel1)
                                        .addComponent(bloodPressureLabel1)
                                        .addComponent(heartbeatLabel1))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(heartbeatField1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(temperatureField1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane2)
                                        .addComponent(bloodPressureField1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(titleLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(519, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(titleLabel1)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(deleteButton))
                .addGap(28, 28, 28)
                .addComponent(encounterDescriptionLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(heartbeatField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(heartbeatLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(temperatureLabel1)
                    .addComponent(temperatureField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bloodPressureLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bloodPressureField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(diagnosisLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveButton1)
                .addContainerGap(171, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void recordEncounterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordEncounterButtonActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_recordEncounterButtonActionPerformed

    private void heartbeatFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heartbeatFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_heartbeatFieldActionPerformed

    private void temperatureFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temperatureFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_temperatureFieldActionPerformed

    private void bloodPressureFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bloodPressureFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bloodPressureFieldActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        

    }//GEN-LAST:event_saveButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        int selectedIndex = encounterListTable.getSelectedRow();
        if (selectedIndex <0){
            JOptionPane.showMessageDialog(this, "Please select an entry to view", "Error", HEIGHT);
            return;
        }
             
        DefaultTableModel model = (DefaultTableModel) encounterListTable.getModel();
        
        
        heartbeatField1.setText(model.getValueAt(selectedIndex, 2).toString());
        temperatureField1.setText(model.getValueAt(selectedIndex, 3).toString());
        bloodPressureField1.setText(model.getValueAt(selectedIndex, 4).toString());
        diagnosisField1.setText(model.getValueAt(selectedIndex, 5).toString());
    }//GEN-LAST:event_updateButtonActionPerformed

    private void heartbeatField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heartbeatField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_heartbeatField1ActionPerformed

    private void temperatureField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temperatureField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_temperatureField1ActionPerformed

    private void bloodPressureField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bloodPressureField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bloodPressureField1ActionPerformed

    private void saveButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButton1ActionPerformed
        // TODO add your handling code here:
        try {
            DefaultTableModel model = (DefaultTableModel) encounterListTable.getModel();
            int selectedIndex = encounterListTable.getSelectedRow();
            
            Class.forName("com.mysql.jdbc.Driver");
            sqlConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/connector", "root", "root");
            pst = sqlConn.prepareStatement("update encounters set Heartbeat = ?, Temperature = ?, BloodPressure = ?, Diagnosis = ? where encounter_id = ?");

            pst.setString(1, heartbeatField1.getText());
            pst.setString(2, temperatureField1.getText());
            pst.setString(3, bloodPressureField1.getText());
            pst.setString(4, diagnosisField1.getText());
            pst.setString(5, model.getValueAt(selectedIndex, 0).toString());

            pst.executeUpdate();

            JOptionPane.showMessageDialog(this, "Encounter recorded successfully", "Success", HEIGHT);
            populateTable();
            resetForm();
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please enter all readings", "Error", HEIGHT);
        }
    }//GEN-LAST:event_saveButton1ActionPerformed

    private void resetForm() {
        heartbeatField1.setText("");
        temperatureField1.setText("");
        bloodPressureField1.setText("");
        diagnosisField1.setText("");
    }
    
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        int selectedIndex = encounterListTable.getSelectedRow();
        if(selectedIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select an entry to be deleted", "Error", HEIGHT);
        } else {
            DefaultTableModel model = (DefaultTableModel) encounterListTable.getModel();
            try {
                Class.forName("com.mysql.jdbc.Driver");
                sqlConn = DriverManager.getConnection(dataConnector, username, password);
                pst = sqlConn.prepareStatement("DELETE FROM encounters WHERE encounter_id = ?;");

                pst.setString(1, model.getValueAt(selectedIndex, 0).toString());

                pst.executeUpdate();
                populateTable();

                JOptionPane.showMessageDialog(this, "Doctor Deleted Successfully", "Update", HEIGHT);
            } catch(Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bloodPressureField;
    private javax.swing.JTextField bloodPressureField1;
    private javax.swing.JLabel bloodPressureLabel;
    private javax.swing.JLabel bloodPressureLabel1;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextArea diagnosisField;
    private javax.swing.JTextArea diagnosisField1;
    private javax.swing.JLabel diagnosisLabel;
    private javax.swing.JLabel diagnosisLabel1;
    private javax.swing.JLabel encounterDescriptionLabel;
    private javax.swing.JLabel encounterDescriptionLabel1;
    private javax.swing.JTable encounterListTable;
    private javax.swing.JTextField heartbeatField;
    private javax.swing.JTextField heartbeatField1;
    private javax.swing.JLabel heartbeatLabel;
    private javax.swing.JLabel heartbeatLabel1;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton recordEncounterButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton saveButton1;
    private javax.swing.JTextField temperatureField;
    private javax.swing.JTextField temperatureField1;
    private javax.swing.JLabel temperatureLabel;
    private javax.swing.JLabel temperatureLabel1;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel titleLabel1;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
